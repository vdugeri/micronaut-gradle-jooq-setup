/*
 * This file is generated by jOOQ.
 */
package com.infelsoft.student.tables;


import com.infelsoft.student.Keys;
import com.infelsoft.student.Public;
import com.infelsoft.student.tables.records.StudentProfileRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentProfile extends TableImpl<StudentProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_profile</code>
     */
    public static final StudentProfile STUDENT_PROFILE = new StudentProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentProfileRecord> getRecordType() {
        return StudentProfileRecord.class;
    }

    /**
     * The column <code>public.student_profile.id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_profile.student_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_profile.admission_date</code>.
     */
    public final TableField<StudentProfileRecord, LocalDate> ADMISSION_DATE = createField(DSL.name("admission_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.student_profile.dob</code>.
     */
    public final TableField<StudentProfileRecord, LocalDate> DOB = createField(DSL.name("dob"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.student_profile.blood_group</code>.
     */
    public final TableField<StudentProfileRecord, String> BLOOD_GROUP = createField(DSL.name("blood_group"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student_profile.gender</code>.
     */
    public final TableField<StudentProfileRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.student_profile.religion</code>.
     */
    public final TableField<StudentProfileRecord, String> RELIGION = createField(DSL.name("religion"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student_profile.nationality</code>.
     */
    public final TableField<StudentProfileRecord, String> NATIONALITY = createField(DSL.name("nationality"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student_profile.state_of_origin</code>.
     */
    public final TableField<StudentProfileRecord, String> STATE_OF_ORIGIN = createField(DSL.name("state_of_origin"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student_profile.lga_of_origin</code>.
     */
    public final TableField<StudentProfileRecord, String> LGA_OF_ORIGIN = createField(DSL.name("lga_of_origin"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.student_profile.health_info</code>.
     */
    public final TableField<StudentProfileRecord, String> HEALTH_INFO = createField(DSL.name("health_info"), SQLDataType.VARCHAR(2550), this, "");

    /**
     * The column <code>public.student_profile.batch_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_profile.created_at</code>.
     */
    public final TableField<StudentProfileRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_profile.updated_at</code>.
     */
    public final TableField<StudentProfileRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private StudentProfile(Name alias, Table<StudentProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentProfile(Name alias, Table<StudentProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_profile</code> table reference
     */
    public StudentProfile(String alias) {
        this(DSL.name(alias), STUDENT_PROFILE);
    }

    /**
     * Create an aliased <code>public.student_profile</code> table reference
     */
    public StudentProfile(Name alias) {
        this(alias, STUDENT_PROFILE);
    }

    /**
     * Create a <code>public.student_profile</code> table reference
     */
    public StudentProfile() {
        this(DSL.name("student_profile"), null);
    }

    public <O extends Record> StudentProfile(Table<O> child, ForeignKey<O, StudentProfileRecord> key) {
        super(child, key, STUDENT_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<StudentProfileRecord> getPrimaryKey() {
        return Keys.STUDENT_PROFILE_PKEY;
    }

    @Override
    public List<ForeignKey<StudentProfileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_PROFILE__FK_STUDENT_ID);
    }

    private transient Students _students;

    /**
     * Get the implicit join path to the <code>public.students</code> table.
     */
    public Students students() {
        if (_students == null)
            _students = new Students(this, Keys.STUDENT_PROFILE__FK_STUDENT_ID);

        return _students;
    }

    @Override
    public StudentProfile as(String alias) {
        return new StudentProfile(DSL.name(alias), this);
    }

    @Override
    public StudentProfile as(Name alias) {
        return new StudentProfile(alias, this);
    }

    @Override
    public StudentProfile as(Table<?> alias) {
        return new StudentProfile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentProfile rename(String name) {
        return new StudentProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentProfile rename(Name name) {
        return new StudentProfile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentProfile rename(Table<?> name) {
        return new StudentProfile(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UUID, UUID, LocalDate, LocalDate, String, String, String, String, String, String, String, UUID, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super UUID, ? super UUID, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super UUID, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super UUID, ? super UUID, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super UUID, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
