plugins {
	alias(libs.plugins.dotenv)
	alias(libs.plugins.shadow.jar)
	alias(libs.plugins.micronaut)
	alias(libs.plugins.micronaut.aot)
	id('maven-publish')
	alias(libs.plugins.jooq)
	alias(libs.plugins.spotless)
}

group = "com.easyremit.bills"

sourceSets {
	generated {
		java {
			srcDir "${buildDir}/generated/main/java"
		}
	}
}

repositories {
	mavenLocal()
	//  mavenCentral()
	maven {
		url = uri("https://repo.maven.apache.org/maven2")
	}
}

dependencies {
	// Micronaut core dependencies
	annotationProcessor("io.micronaut:micronaut-http-validation")
	annotationProcessor("io.micronaut.security:micronaut-security-annotations")
	implementation("io.micronaut:micronaut-jackson-databind")
	implementation("io.micronaut:micronaut-management")
	runtimeOnly("org.yaml:snakeyaml")
	implementation("io.micronaut.validation:micronaut-validation")
	// micronaut-reactor-http-client includes inject, http-client, and reactor.
	implementation("io.micronaut.reactor:micronaut-reactor-http-client")

	// immutables
	annotationProcessor(libs.immutables)
	implementation(libs.immutables)

	// swagger
	annotationProcessor("io.micronaut.openapi:micronaut-openapi")
	implementation("io.swagger.core.v3:swagger-annotations")


	// jackson
	implementation("com.fasterxml.jackson.core:jackson-core")
	implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

	// others
	implementation(libs.apache.commons) // provide useful string/number/stream utility functions

	// testing
	testImplementation(libs.reactor.test)
	testImplementation(libs.mockitor.core)
	testImplementation("org.testcontainers:junit-jupiter")
	testImplementation("org.testcontainers:r2dbc")
	testImplementation("org.testcontainers:testcontainers")
	testImplementation("org.testcontainers:postgresql")
	testImplementation('org.junit.jupiter:junit-jupiter-params')
	testImplementation('org.mockito:mockito-core')
	testImplementation('org.mockito:mockito-junit-jupiter')

	//database
	annotationProcessor("io.micronaut.data:micronaut-data-processor")
	implementation("io.micronaut.data:micronaut-data-r2dbc")
	implementation(libs.jooq)
	implementation("io.micronaut.sql:micronaut-jooq")
	runtimeOnly('io.micronaut.flyway:micronaut-flyway')
	runtimeOnly('io.micronaut.sql:micronaut-jdbc-hikari') // used for flyway
	runtimeOnly(libs.r2dbc.pool)
	runtimeOnly('org.postgresql:postgresql')
	runtimeOnly('org.postgresql:r2dbc-postgresql')
	jooqGenerator(libs.jooq.postgres)
	runtimeOnly("org.flywaydb:flyway-database-postgresql")

	// aws
	implementation(libs.s3)

	// aot
	aotPlugins platform(libs.micronaut.platform)
	aotPlugins("io.micronaut.security:micronaut-security-aot")

	// security
	implementation("io.micronaut.security:micronaut-security-jwt")
	annotationProcessor("io.micronaut.security:micronaut-security-annotations")
}

application {
	mainClass.set("com.example.Application")
}

description = "com.example:1.0.0-SNAPSHOT"

java {
	sourceCompatibility = JavaVersion.toVersion("17")
	targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("com.example.*")
	}
	aot {
		optimizeServiceLoading = false
		convertYamlToJava = false
		precomputeOperations = true
		cacheEnvironment = true
		optimizeClassLoading = true
		deduceEnvironment = true
		optimizeNetty = true
		configurationProperties.put("micronaut.security.jwks.enabled","false")
	}
}

/**
 * Custom Tasks
 */
run.configure {
	group("Local Development")
	description("Run ${appName} in local run-mode, sourcing environment variables from .env file.")
	doFirst {
		environment = env.allVariables
	}
}

// Custom Tasks
tasks.register("debug") {
	group("Local Development")
	description("Run ${appName} locally with debug enabled at port ${debugPort}.")
	doFirst {
		run.configure {
			doFirst {
				def suspendOption = env.isPresent("DEBUG_SUSPEND") ? "${env.DEBUG_SUSPEND.value}" : "n"
				jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=${suspendOption},address=${debugPort}"
			}
		}
	}
	finalizedBy run
}

tasks.register('kill', Exec) {
	group("Local Development")
	description("Kill ${appName} running locally")
	commandLine("local-setup/killserver.sh")
}

tasks.withType(JavaExec).configureEach {
	jvmArgs "-Dmicronaut.environments=db,local"
	if (project.findProperty("DEBUG") == "true") {
		jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${debugPort}"
	}
}

tasks.register('startdb', Exec) {
	workingDir("./")
	group("Local Development")
	description("Docker-compose postgres locally and apply DB initialization. " +
			"See docker-compose.yml for vars required in your .env file")
	commandLine("local-setup/startdb.sh")
}


tasks.register("updateGitHooks", Copy) {
	from "./local-setup/pre-commit"
	into "./.git/hooks"
}

test {
	group("Local Development")
	description("Runs the test suite")
	environment = env.allVariables
	testLogging {
		exceptionFormat = "full"
		events "FAILED", "SKIPPED", "PASSED"
		showStandardStreams = true
		afterSuite { desc, result ->
			if (!desc.parent) {
				println "\nTest result: ${result.resultType}"
				println "Test summary: ${result.testCount} tests, " +
						"${result.successfulTestCount} succeeded, " +
						"${result.failedTestCount} failed, " +
						"${result.skippedTestCount} skipped"
			}
		}
	}
	useJUnitPlatform {}
}

/**
 * Spotless
 */
spotless {
	format "misc", {
		// define the files to apply `misc` to
		target "*.md", ".gitignore"

		trimTrailingWhitespace()
		indentWithSpaces()
		endWithNewline()
	}

	java {
		palantirJavaFormat()
		formatAnnotations()
		targetExclude("build/**/*.java")
	}

	groovyGradle {
		greclipse()
	}
}

/**
 * Jooq generation
 */
jooq {
	version = '3.17.7'

	configurations {
		main {
			generateSchemaSourceOnCompilation = false

			generationTool {
				logging = org.jooq.meta.jaxb.Logging.DEBUG
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/example'
					user = 'postgres'
					password = 'root'
					properties {
						property {
							key = 'PAGE_SIZE'
							value = 2048
						}
					}
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
						includes = '.*'
						excludes = 'flyway_schema_history'
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = false
						pojos = true
						fluentSetters = false
					}
					target {
						packageName = 'com.example'
						directory = 'src/generated/main/java'
					}
					strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
				}
			}
		}
	}
}